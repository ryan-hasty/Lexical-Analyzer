<tokens>
<keyword> class </keyword>
<identifier> SquareGame </identifier>
<symbols> { </symbols>
<keyword> field </keyword>
<identifier> Square </identifier>
<identifier> square </identifier>
<symbols> ; </symbols>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbols> ; </symbols>
<keyword> constructor </keyword>
<identifier> SquareGame </identifier>
<identifier> new </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> square </identifier>
<symbols> = </symbols>
<identifier> square </identifier>
<symbols> ; </symbols>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbols> = </symbols>
<identifier> direction </identifier>
<symbols> ; </symbols>
<keyword> return </keyword>
<identifier> square </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> dispose </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbols> . </symbols>
<identifier> deAlloc </identifier>
<symbols> ( </symbols>
<identifier> square </identifier>
<symbols> ) </symbols>
<symbols> ; </symbols>
<keyword> return </keyword>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbols> ; </symbols>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbols> ; </symbols>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbols> = </symbols>
<identifier> key </identifier>
<symbols> ; </symbols>
<keyword> while </keyword>
<symbols> ( </symbols>
<identifier> exit </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> while </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> key </identifier>
<symbols> = </symbols>
<identifier> key </identifier>
<symbols> ; </symbols>
<keyword> do </keyword>
<identifier> moveSquare </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbols> = </symbols>
<identifier> exit </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> decSize </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> incSize </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbols> = </symbols>
<identifier> exit </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbols> = </symbols>
<identifier> key </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbols> = </symbols>
<identifier> square </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbols> = </symbols>
<identifier> direction </identifier>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> while </keyword>
<symbols> ( </symbols>
<identifier> key </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> let </keyword>
<identifier> key </identifier>
<symbols> = </symbols>
<identifier> key </identifier>
<symbols> ; </symbols>
<keyword> do </keyword>
<identifier> moveSquare </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<symbols> } </symbols>
<keyword> return </keyword>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveSquare </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> direction </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> moveUp </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> direction </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> moveDown </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> direction </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> moveLeft </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> if </keyword>
<symbols> ( </symbols>
<identifier> direction </identifier>
<symbols> ) </symbols>
<symbols> { </symbols>
<keyword> do </keyword>
<identifier> square </identifier>
<symbols> . </symbols>
<identifier> moveRight </identifier>
<symbols> ( </symbols>
<symbols> ) </symbols>
<symbols> ; </symbols>
<symbols> } </symbols>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbols> . </symbols>
<identifier> wait </identifier>
<symbols> ( </symbols>
<identifier> direction </identifier>
<symbols> ) </symbols>
<symbols> ; </symbols>
<keyword> return </keyword>
<symbols> ; </symbols>
<symbols> } </symbols>
<symbols> } </symbols>
</tokens>